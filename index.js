const TelegramBot = require('node-telegram-bot-api');
const {API_KEY_BOT, ID_USER} = require('../config_bot.js');
const {sections, hours, minutes, amountWords} = require('./src/sections');
const {commands} = require('./src/commands');
const {findWord, initialization, findUser, addUser, addHours, addMinutes, addAmountWords, getUsers, dayLessonUserUpdate, getWords, learnedWordIdUpdate} = require('./src/api.js');

const bot = new TelegramBot(API_KEY_BOT, {
  polling: {
    interval: 1000,
    autoStart: true
  }
});

initialization();
bot.on("polling_error", err => console.log(err));
bot.on('text', async msg => {
  const id = msg.chat.id;
  const text = msg.text;
  findUser(msg.from.id)
    .then(result => {
      if(result.length === 0) {
        addUser(msg.from);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!')
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
      }
    })
  if(ID_USER != msg.from.id) return bot.sendMessage(id, '‚úã –ü—Ä–∏–≤–µ—Ç! –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ! üòï');
  try {
    switch(text) {
      case '/start':  
        bot.sendPhoto(id, "./src/img/book.png") 
        setTimeout(() => bot.sendMessage(id, `‚úã –ü—Ä–∏–≤–µ—Ç! \n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ª–æ–≤–∞—Ä—å (–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫) –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. \n–ï–≥–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å.`), 800);
        break;
      case '/options': 
        setTimeout(() => bot.sendMessage(id, '–í—ã–±–µ—Ä–∏—Ç–µ: ', sections), 500);
        break;
      default:
        if(/\d/.test(text) || /:/i.test(text) || /,/i.test(text)) {
          if(/\d/.test(text) && /:/i.test(text) && /,/i.test(text)) {
            return bot.sendMessage(id, '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!');
          } 
          return bot.sendMessage(id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!');
        } 
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤
        const result = await findWord(text);
        if (result === undefined) return bot.sendMessage(id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ!');
        const {word, transcription, translation} = result;
        await bot.sendMessage(id, word + ' ' + transcription + ' ' + translation);
    }
  }
  catch(error) {
    console.log(error);
  }
});

bot.setMyCommands(commands);

bot.on('callback_query', async msg => {
  const data = msg.data;
  const id = msg.message.chat.id;
  const user = await findUser(id);
    //! –ß–ê–°–û–í–û–ô –ü–û–Ø–°
    switch(data) {
      case '/—Åhoose time to study':  
        setTimeout(() => bot.sendMessage(id, '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å: ', hours), 500); 
        break;
      case '/select number of words': 
        setTimeout(() => bot.sendMessage(id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ', amountWords), 500);
        break;
      default:
        if(data.includes('/hours')){
          const userHours = parseInt(data.replace('/hours_', ''));
          addHours(userHours, id);
          setTimeout(() => bot.sendMessage(id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã: ', minutes), 500);
        } 
        if(data.includes('/minutes')){
          const userMinutes = parseInt(data.replace('/minutes_', ''));
          addMinutes(userMinutes, id);
          if(user[0].amountWords === 0) {
            setTimeout(() => bot.sendMessage(id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ', amountWords), 500);
          } else {
            setTimeout(() => bot.sendMessage(id, 'ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! \n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ ' + user[0].hours + ' —á–∞—Å. ' + userMinutes + ' –º–∏–Ω.' + ' –º—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å –ø–æ ' + user[0].amountWords + ' —Å–ª–æ–≤(a).'), 500);
          }
        }
        if(data.includes('/amountWords')){
          const amountWords = parseInt(data.replace('/amountWords_', ''));
          addAmountWords(amountWords, id);
          setTimeout(() => bot.sendMessage(id, 'ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! \n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ ' + user[0].hours + ' —á–∞—Å. ' + user[0].minutes + ' –º–∏–Ω.' + ' –º—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å –ø–æ ' + amountWords + ' —Å–ª–æ–≤(a).'), 500);
        }
        
    }
});

setInterval(async () => {
  const currentDate = new Date();
  const currentDay = currentDate.getDate();
  const hours = currentDate.getHours();
  const minutes = currentDate.getMinutes();
  const users = await getUsers();
  users.forEach(async user => {
    if(user.amountWords > 0 && user.dayLesson !== currentDay){
      if(user.hours === hours){
        // –î–æ–ø—É—Å—Ç–∏–º–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1 –º–∏–Ω—É—Ç—É
        if(minutes === user.minutes || user.minutes === minutes + 1){
          bot.sendMessage(user.user_id, '–°–õ–û–í–ê');
          const words = await getWords(user.amountWords, user.learnedWordId);
          words.forEach(item => {
            bot.sendMessage(user.user_id, item.word + ' [' + item.transcription + '] ' + item.translation);
          });
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—É—á–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞
          learnedWordIdUpdate(user.learnedWordId + user.amountWords, user.user_id)
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
          dayLessonUserUpdate(currentDay, user.user_id);
        }
      }
    }
  });
  // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –±–æ–ª—å—à–µ 0 
  // –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–µ + 1 –º–∏–Ω—É—Ç–∞, 
  // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
}, 1000);